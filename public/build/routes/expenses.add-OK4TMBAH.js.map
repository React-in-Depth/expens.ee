{
  "version": 3,
  "sources": ["../../../app/routes/expenses.add.tsx", "../../../app/components/Dialog.module.css", "../../../app/components/Dialog.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/expenses.add.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/expenses.add.tsx\");\n  import.meta.hot.lastModified = \"1700512623309.3254\";\n}\n// REMIX HMR END\n\nimport { redirect } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { createCategory, getCategories } from \"~/models/category.server\";\nimport { createExpense } from \"~/models/expense.server\";\nimport { requireUserId } from \"~/session.server\";\nimport * as Forms from \"~/components/Form\";\nimport { Dialog } from \"~/components/Dialog\";\nvar CategoryType = /*#__PURE__*/function (CategoryType) {\n  CategoryType[\"Existing\"] = \"existing\";\n  CategoryType[\"New\"] = \"new\";\n  return CategoryType;\n}(CategoryType || {});\nexport async function loader({\n  request\n}) {\n  const userId = await requireUserId(request);\n  const categories = await getCategories({\n    userId\n  });\n  return json({\n    categories\n  });\n}\nexport async function action({\n  request\n}) {\n  const userId = await requireUserId(request);\n  const formData = await request.formData();\n  const item = formData.get(\"item\");\n  const valueAsString = formData.get(\"value\");\n  if (typeof item !== \"string\" || item.length <= 0) {\n    return json({\n      errors: {\n        title: \"Item is required\",\n        body: null\n      }\n    }, {\n      status: 400\n    });\n  }\n  if (typeof valueAsString !== \"string\" || parseFloat(valueAsString) <= 0) {\n    return json({\n      errors: {\n        title: \"Value is required\",\n        body: null\n      }\n    }, {\n      status: 400\n    });\n  }\n  const value = parseFloat(valueAsString);\n  let categoryId;\n  const categoryType = formData.get(\"categoryType\");\n  switch (categoryType) {\n    case CategoryType.Existing:\n      {\n        categoryId = formData.get(\"categoryId\");\n        if (typeof categoryId !== \"string\" || categoryId.length <= 0) {\n          return json({\n            errors: {\n              title: \"Category selection is required\",\n              body: null\n            }\n          }, {\n            status: 400\n          });\n        }\n        break;\n      }\n    case CategoryType.New:\n      {\n        const categoryName = formData.get(\"name\");\n        const categoryColor = formData.get(\"color\");\n        if (typeof categoryName !== \"string\" || categoryName.length <= 0) {\n          return json({\n            errors: {\n              title: \"Category name is required\",\n              body: null\n            }\n          }, {\n            status: 400\n          });\n        }\n        if (typeof categoryColor !== \"string\" || categoryColor.length !== 7) {\n          return json({\n            errors: {\n              title: \"Category color is required\",\n              body: null\n            }\n          }, {\n            status: 400\n          });\n        }\n        const newCategory = await createCategory({\n          name: categoryName,\n          color: categoryColor,\n          userId\n        });\n        categoryId = newCategory.id;\n        break;\n      }\n    default:\n      return json({\n        errors: {\n          title: \"Category must be selected\",\n          body: null\n        }\n      }, {\n        status: 400\n      });\n  }\n  await createExpense({\n    item,\n    value,\n    userId,\n    categoryId\n  });\n  return redirect(\"/expenses\");\n}\nexport const meta = () => [{\n  title: \"Add new expense\"\n}];\nexport default function AddExpense() {\n  _s();\n  const data = useLoaderData();\n  return <Dialog>\n      <Forms.Form method=\"post\">\n        <Forms.Title>Add expense</Forms.Title>\n        <Forms.Label>\n          <Forms.LabelSpan>Description</Forms.LabelSpan>\n          <Forms.Input name=\"item\" />\n        </Forms.Label>\n        <Forms.Label>\n          <Forms.LabelSpan>Amount</Forms.LabelSpan>\n          <Forms.Input name=\"value\" type=\"number\" />\n        </Forms.Label>\n        <Forms.Label>\n          <Forms.LabelSpan>Category</Forms.LabelSpan>\n          <Forms.OptionGroup>\n            <Forms.Option defaultChecked id=\"cat-exist\" type=\"radio\" name=\"categoryType\" value={CategoryType.Existing} />\n            <Forms.OptionName htmlFor=\"cat-exist\">\n              Select existing category\n            </Forms.OptionName>\n            <Forms.OptionContent>\n              <Forms.Select name=\"categoryId\">\n                {data.categories.map(({\n                name,\n                id\n              }) => <option key={id} value={id}>\n                    {name}\n                  </option>)}\n              </Forms.Select>\n            </Forms.OptionContent>\n          </Forms.OptionGroup>\n          <Forms.OptionGroup>\n            <Forms.Option id=\"cat-new\" type=\"radio\" name=\"categoryType\" value={CategoryType.New} />\n            <Forms.OptionName htmlFor=\"cat-new\">\n              Create new category\n            </Forms.OptionName>\n            <Forms.OptionContent>\n              <Forms.Label>\n                <Forms.LabelSpan>Category name</Forms.LabelSpan>\n                <Forms.Input name=\"name\" />\n              </Forms.Label>\n              <Forms.Label>\n                <Forms.LabelSpan>Color</Forms.LabelSpan>\n                <Forms.Input name=\"color\" type=\"color\" />\n              </Forms.Label>\n            </Forms.OptionContent>\n          </Forms.OptionGroup>\n        </Forms.Label>\n        <Forms.Buttons>\n          <Forms.CancelLink to=\"..\">Cancel</Forms.CancelLink>\n          <Forms.Submit>Add</Forms.Submit>\n        </Forms.Buttons>\n      </Forms.Form>\n    </Dialog>;\n}\n_s(AddExpense, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = AddExpense;\nvar _c;\n$RefreshReg$(_c, \"AddExpense\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "export default {\"background\":\"Dialog-module__background__Ewz7w\",\"dialog\":\"Dialog-module__dialog__C1oc2\"};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/Dialog.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/Dialog.tsx\");\n}\n// REMIX HMR END\n\nimport styles from \"./Dialog.module.css\";\nexport function Dialog({\n  children\n}) {\n  return <aside className={styles.background}>\n      <section className={styles.dialog}>{children}</section>\n    </aside>;\n}\n_c = Dialog;\nvar _c;\n$RefreshReg$(_c, \"Dialog\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_node", "import_jsx_dev_runtime", "CategoryType", "_c"]
}

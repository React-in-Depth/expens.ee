{
  "version": 3,
  "sources": ["../../../app/routes/join.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/join.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/join.tsx\");\n  import.meta.hot.lastModified = \"1700408433495.5996\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { Link, useSearchParams } from \"@remix-run/react\";\nimport { getUserId, createUserSession } from \"~/session.server\";\nimport { createUser, getUserByEmail } from \"~/models/user.server\";\nimport { safeRedirect, validateEmail } from \"~/utils\";\nimport { UnauthMenu } from \"~/components/Menu\";\nimport * as Forms from \"~/components/Form\";\nexport async function loader({\n  request\n}) {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n  return json({});\n}\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/\");\n  if (!validateEmail(email)) {\n    return json({\n      errors: {\n        email: \"Email is invalid\",\n        password: null\n      }\n    }, {\n      status: 400\n    });\n  }\n  if (typeof password !== \"string\" || password.length === 0) {\n    return json({\n      errors: {\n        email: null,\n        password: \"Password is required\"\n      }\n    }, {\n      status: 400\n    });\n  }\n  if (password.length < 8) {\n    return json({\n      errors: {\n        email: null,\n        password: \"Password is too short\"\n      }\n    }, {\n      status: 400\n    });\n  }\n  const existingUser = await getUserByEmail(email);\n  if (existingUser) {\n    return json({\n      errors: {\n        email: \"A user already exists with this email\",\n        password: null\n      }\n    }, {\n      status: 400\n    });\n  }\n  const user = await createUser(email, password);\n  return createUserSession({\n    request,\n    userId: user.id,\n    remember: false,\n    redirectTo\n  });\n}\nexport const meta = () => [{\n  title: \"Sign Up\"\n}];\nexport default function Join() {\n  _s();\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") ?? undefined;\n  return <UnauthMenu current=\"join\">\n      <Forms.Form method=\"post\">\n        <Forms.Title>Create an account</Forms.Title>\n        <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n        <Forms.Label>\n          <Forms.LabelSpan>Email</Forms.LabelSpan>\n          <Forms.Input name=\"email\" type=\"email\" required autoComplete=\"email\" />\n        </Forms.Label>\n        <Forms.Label>\n          <Forms.LabelSpan>Password</Forms.LabelSpan>\n          <Forms.Input name=\"password\" type=\"password\" required autoComplete=\"new-password\" />\n        </Forms.Label>\n        <Forms.Buttons>\n          <Forms.Submit>Create account</Forms.Submit>\n        </Forms.Buttons>\n        <p>\n          Already have an account?{\" \"}\n          <Link to={{\n          pathname: \"/login\",\n          search: searchParams.toString()\n        }}>\n            Log in\n          </Link>\n        </p>\n      </Forms.Form>\n    </UnauthMenu>;\n}\n_s(Join, \"HWxNQEGJGSlsPJ3ubBB3081mtng=\", false, function () {\n  return [useSearchParams];\n});\n_c = Join;\nvar _c;\n$RefreshReg$(_c, \"Join\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAA+B;AAE/B,qBAA6C;AAC7C,kBAA2C;AA4EnC;AAnGR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,0BAA4B,EAAE;AAAA,EACvE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAqB;AACrB,cAAY,IAAI,eAAe;AACjC;AAyEO,IAAM,OAAO,MAAM,CAAC;AAAA,EACzB,OAAO;AACT,CAAC;AACc,SAAR,OAAwB;AAC7B,KAAG;AACH,QAAM,CAAC,YAAY,IAAI,gBAAgB;AACvC,QAAM,aAAa,aAAa,IAAI,YAAY,KAAK;AACrD,SAAO,mDAAC,cAAW,SAAQ,QACvB,6DAAO,MAAN,EAAW,QAAO,QACjB;AAAA,uDAAO,OAAN,EAAY,iCAAb;AAAA;AAAA;AAAA;AAAA,WAA8B;AAAA,IAC9B,mDAAC,WAAM,MAAK,UAAS,MAAK,cAAa,OAAO,cAA9C;AAAA;AAAA;AAAA;AAAA,WAA0D;AAAA,IAC1D,mDAAO,OAAN,EACC;AAAA,yDAAO,WAAN,EAAgB,qBAAjB;AAAA;AAAA;AAAA;AAAA,aAAsB;AAAA,MACtB,mDAAO,OAAN,EAAY,MAAK,SAAQ,MAAK,SAAQ,UAAQ,MAAC,cAAa,WAA7D;AAAA;AAAA;AAAA;AAAA,aAAqE;AAAA,SAFvE;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IACA,mDAAO,OAAN,EACC;AAAA,yDAAO,WAAN,EAAgB,wBAAjB;AAAA;AAAA;AAAA;AAAA,aAAyB;AAAA,MACzB,mDAAO,OAAN,EAAY,MAAK,YAAW,MAAK,YAAW,UAAQ,MAAC,cAAa,kBAAnE;AAAA;AAAA;AAAA;AAAA,aAAkF;AAAA,SAFpF;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IACA,mDAAO,SAAN,EACC,6DAAO,QAAN,EAAa,8BAAd;AAAA;AAAA;AAAA;AAAA,WAA4B,KAD9B;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAC,OAAE;AAAA;AAAA,MACwB;AAAA,MACzB,mDAAC,QAAK,IAAI;AAAA,QACV,UAAU;AAAA,QACV,QAAQ,aAAa,SAAS;AAAA,MAChC,GAAG,sBAHD;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,SAPF;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,OAtBF;AAAA;AAAA;AAAA;AAAA,SAuBA,KAxBG;AAAA;AAAA;AAAA;AAAA,SAyBL;AACJ;AACA,GAAG,MAAM,gCAAgC,OAAO,WAAY;AAC1D,SAAO,CAAC,eAAe;AACzB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,MAAM;AAEvB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
